require File.expand_path('../project_params.rb', __dir__)
require File.expand_path('../match_params.rb', __dir__)
require File.expand_path('../env_params.rb', __dir__)

workspace = PROJECT_PARAMS[:workspace]
app_scheme = PROJECT_PARAMS[:app_scheme]
uitest_scheme = PROJECT_PARAMS[:uitest_scheme]
test_devices = PROJECT_PARAMS[:test_devices]

derived_data_path = PROJECT_PARAMS[:derived_data_path]
reports_folder = PROJECT_PARAMS[:reports_folder]
swiftlint_path = PROJECT_PARAMS[:swiftlint_path]

xcconfig_folder = "./ragnarok-us-app/AppConfiguration/Variants/"

MATCH_KEYCHAIN_NAME = MATCH_PARAMS[:MATCH_KEYCHAIN_NAME]
MATCH_KEYCHAIN_PASSWORD = MATCH_PARAMS[:MATCH_KEYCHAIN_PASSWORD]
MATCH_GIT_BASIC_AUTHORIZATION = MATCH_PARAMS[:MATCH_GIT_BASIC_AUTHORIZATION]

github_run_id = ENV["GITHUB_RUN_ID"]

import("release/Slack")

# --- Deploy

desc 'Run deploy'
lane :deploy do |options|
  if options[:env]
    env = options[:env]
    configuration = "Release"
    xcconfig = xcconfig_folder+env+".xcconfig"

    match_signing_config
    build(xcconfig: xcconfig, configuration: configuration)
    appcenter(xcconfig: xcconfig)
    slackit(env: env, build_number: github_run_id)
  else
    puts "missing parameters, valid parameters `env` = 'dev' | 'prod' | 'qa'"
  end
end

# --- BaaS Build

desc "Build the project without packaging"
private_lane :build do |options|

  if options[:xcconfig] && options[:configuration]
    xcconfig_path = options[:xcconfig]
    configuration = options[:configuration]

    build_ios_app(
      workspace: workspace,
      configuration: configuration,
      xcconfig: xcconfig_path,
      scheme: app_scheme,
      silent: false,
      clean: true,
      codesigning_identity: 'iPhone Distribution: BACKBASE EUROPE B.V.',
      export_options: {
        method: "enterprise"
      },
      xcargs: '-allowProvisioningUpdates',
      skip_profile_detection: true
    )
  else
    puts "missing parameters, valid parameters `xcconfig` =  '/path/to/dev.xcconfig', `configuration` = Debug | Release"
  end
end

private_lane :appcenter do |options|
  if options[:xcconfig]
    xcconfig_path = options[:xcconfig]
    destinations = "Public"
    notify = true

    # Retrieve app name, as found in AppCenter, from config
    appcenter_app_name = get_xcconfig_value(
      path: xcconfig_path,
      name: 'BB_APPCENTER_APP_NAME'
    )

    # Make sure the app name has hyphens instead of whitespaces
    appcenter_app_name = appcenter_app_name.gsub(" ", "-")

    appcenter_upload(
      owner_name: "alm-advanzia",
      app_name: appcenter_app_name,
      notify_testers: notify,
      destinations: destinations
    )
  else
    puts "missing parameters, valid parameters `xcconfig` =  '/path/to/dev.xcconfig'"
  end
end

# --- Branches

lane :master do
  deploy(env: "prod")
end

lane :develop do
  # Temporarily deploy UAT instead of QA
  deploy(env: "uat")
end

lane :release do
  deploy(env: "uat")
end
